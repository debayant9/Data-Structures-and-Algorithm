1> Richest Customer Wealth 
class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        int max_sum = INT_MIN;
        for(int i = 0; i < accounts.size(); ++i)
        {
            vector<int> cust_data = accounts[i];
            max_sum = max(max_sum, accumulate(cust_data.begin(), cust_data.end(), 0));
        }
        return max_sum;
    }
};

2> Running Sum of 1d array
class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        int max_sum = INT_MIN;
        for(int i = 0; i < accounts.size(); ++i)
        {
            vector<int> cust_data = accounts[i];
            max_sum = max(max_sum, accumulate(cust_data.begin(), cust_data.end(), 0));
        }
        return max_sum;
    }
};

3> Jewels and Stones
class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        int c=0;
     for(int i=0;i<jewels.length();i++){
         for(int j=0;j<stones.length();j++){
             if(jewels[i]==stones[j]){
                 c=c+1;
             }
         }
     }
        return c;

    }
};

4> Min Abs Diff
class Solution {
public:
    vector<vector<int>> minimumAbsDifference(vector<int>& arr) {
        vector<vector<int>> madVector;
        sort(arr.begin(), arr.end());
        if(!arr.empty() || arr.size() != 1)
        {
            int mad = abs(arr[0] - arr[1]);
            int i = 0;
            for (int j = 1; j < arr.size(); ++j)
            {
                int diff = abs(arr[i] - arr[j]);
                if (mad==diff)
                {
                    madVector.push_back({arr[i], arr[j]});
                }
                else if(mad>diff)
                {
                    madVector.clear();
                    madVector.push_back({arr[i], arr[j]});
                    mad = diff;
                }
                ++i;
            }
        }
        return madVector;
    }
};

5> Three Consecutive Odds
class Solution {
public:
    bool threeConsecutiveOdds(vector<int>& arr) {
        int odds = 0;
        bool found = false;
        for (int i = 0; i < arr.size(); ++i)
        {
            if (arr[i]%2 == 1)
            {
                odds+=1;
                if(odds==3)
                {
                    found = true;
                    break;
                }
            }
            else
                odds = 0;
        }
        return found;
    }
};

6> Transpose Matrix
class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size(); 
        vector<vector<int>> transposed(n, vector<int>(m));
    
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                transposed[j][i] = matrix[i][j];
            }
        }
        return transposed;
    }
};

7> Majority Element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // Boyer-Moore's voting algo
        int count = 1;
        int majority = nums[0];
        for (int i = 1; i < nums.size(); ++i)
        {
            if (nums[i] == majority)
                ++count;
            else
                --count;
            if (count == 0){
                majority = nums[i];
                ++count;
            }
        }
        return majority;
    }
};

8> Move Zeroes
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
       int i=0,j=1;
        if (nums.size()!=1)
        {
            while (j<nums.size()){
                if ((nums[i]==0 && nums[j]!=0))
                {
                    nums[i] = nums[j];
                    nums[j] = 0;
                    ++i;++j;
                }
                else if((nums[j]==0 && nums[i]==0))
                    ++j;
                else
                {
                    ++i;++j;
                }
            }
        }
    }
};

